-- MySQL Script generated by MySQL Workbench
-- 04/30/14 18:35:19
-- Model: OptiGrade — Data Model    Version: 1.0

-- OptiGrade 3.0 is an on-line service which provides a software as a service (SAAS) platform to process and store in the cloud optically captured data. It provides an on-line optical answer sheet composer/editor, facilities for the remote scoring and evaluation of multi-choice exams, and a framework with analytic tools for surveys data, captured using desktop optical mark recognition (OMR) technology with a Web-based application front-end.
-- 
-- Copyright © 1997‒2014, OptiSoft Ltd. All rights reserved.

SET GLOBAL init_connect='SET autocommit=0';
-- SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
-- SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
-- SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES,NO_AUTO_VALUE_ON_ZERO';
-- SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT;
-- SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS;
-- SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION;


START TRANSACTION;

DROP SCHEMA IF EXISTS `AccessControl`;
DROP SCHEMA IF EXISTS `AccountsManagement`;
DROP SCHEMA IF EXISTS `UsersManagement`;
DROP SCHEMA IF EXISTS `PlacesManagement`;
DROP DATABASE IF EXISTS `OptiGrade`;

COMMIT;


-- -----------------------------------------------------
-- Schema OptiGrade
-- -----------------------------------------------------
-- Database Schemas for OptiGrade 3.0 (On-line Service)
-- ----------------------------------------------------
-- 
-- Naming conventions
-- ---------------------------------
-- 
-- 1. Pascal (upper camel) casing.
-- 2. No prefixes for tables or columns names. (For exceptions see 5, 6, and 7.)
-- 3. Plural entity names for tables names, where it makes sense. E.g., Addresses.
-- 4. Singular attribute names for columns names. E.g., Street.
-- 5. Singular aliases for entities or objects in queries. E.g., SELECT Address.Street FROM Addresses AS Address.
-- 6. "Id" prefixed by singular entity (table) names for primary keys columns. E.g., AddressId.
-- 7. Use the same name as the referenced column for related foreign key columns.
-- 8. Add meaningful prefix when a column is referenced twice or more from the same table. E.g., OwnerAddressId, UserAddressId.
-- 9. Singular transaction/Plural entity names for schema names, where it makes sense. E.g., UsersManagement, AccessControl.
-- 
-- Column ordering (suggested)
-- ---------------------------------
-- 
-- 1. Primary key, including multi-field primary keys that include foreign keys.
-- 2. Foreign key.
-- 3. Unique index.
-- 4. User generated data.
-- 5. System generated data (non-Boolean, Boolean).
-- 6. Timestamps, etc.
-- 7. References to uploaded files.
-- 8. Large binary/text blocks
-- 
-- Relation and Index names
-- ---------------------------------
-- 
-- Primary key:          TableName_ColumName_pk, TableName_pk
-- Foreign key relation: TableName_ForeignTable_ColumName_fk
-- Foreign key index:    TableName_ForeignTable_ColumName_fx
-- Unique keys:          TableName_ColumnName[_OtherColumnName]_uk
-- Indexes:              TableName_ColumnName[_OtherColumnName]_ix
-- 
-- Auto-increment sequences
-- ---------------------------------
-- 
-- TableName_ColumName_sq
-- 
-- User types*
-- ---------------------------------
-- 
-- Enumerations: GLOBAL_NAME[_ENUM], TABLENAME_COLUMNNAME_ENUM
-- Sets:         GLOBAL_NAME[_SET], TABLENAME_COLUMNNAME_SET
-- 
-- *) You may suppress the qualification suffix (_ENUM, _SET) when a global name has a complete meaning.
-- 
-- Copyright © 1997‒2014, OptiSoft Ltd. All rights reserved.
-- 
-- =================================
-- 
CREATE DATABASE IF NOT EXISTS `OptiGrade` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;


START TRANSACTION;

-- -----------------------------------------------------
-- Schema PlacesManagement
-- -----------------------------------------------------
-- Places Management Schema for OptiGrade 3.0 (On-line Service)
-- ------------------------------------------------------------
-- 
-- This data model supports international postal addresses.
-- 
-- Note that: Not every country supports postal (or zip) codes, nor every country has provinces, states or departments. Also, a few countries have a more complex political dependence division. Codes for provinces and cities are supported optionally.
-- 
-- Involved user types:
-- ---------------------------------
-- 
-- COUNTRY_DEPENDENCE = ENUM('Province', 'State', 'Department', 'Other', 'None')
-- POSTAL_CODE        = ENUM('Postal Code', 'ZIP Code', 'None')
-- 
-- =================================
-- 
CREATE SCHEMA IF NOT EXISTS `PlacesManagement` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
-- -----------------------------------------------------
-- Schema UsersManagement
-- -----------------------------------------------------
-- Users Management Schema for OptiGrade 3.0 (On-line Service)
-- -----------------------------------------------------------
-- 
-- =================================
-- 
CREATE SCHEMA IF NOT EXISTS `UsersManagement` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
-- -----------------------------------------------------
-- Schema AccountsManagement
-- -----------------------------------------------------
-- Accounts Management Schema for OptiGrade 3.0 (On-line Service)
-- --------------------------------------------------------------
-- 
-- =================================
-- 
CREATE SCHEMA IF NOT EXISTS `AccountsManagement` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
-- -----------------------------------------------------
-- Schema AccessControl
-- -----------------------------------------------------
-- Access Control Schema for OptiGrade 3.0 (On-line Service)
-- ---------------------------------------------------------
-- 
-- This is a data model for Role Based Access Control. It is based on the NIST RBAC standard. More info about this standard can be found here: http://csrc.nist.gov/groups/SNS/rbac/.
-- 
-- =================================
-- 
CREATE SCHEMA IF NOT EXISTS `AccessControl` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;

COMMIT;


START TRANSACTION;

-- -----------------------------------------------------
-- Table `PlacesManagement`.`Countries`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PlacesManagement`.`Countries` (
  `CountryId` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `CODE` VARCHAR(2) NOT NULL,
  `Name` VARCHAR(32) NOT NULL,
  `Nationality` VARCHAR(32) NOT NULL,
  PRIMARY KEY (`CountryId`),
  UNIQUE INDEX `Countries_CODE_uk` (`CODE` ASC),
  UNIQUE INDEX `Countries_Name_uk` (`Name` ASC),
  UNIQUE INDEX `Countries_Nationality_uk` (`Nationality` ASC))
ENGINE = InnoDB
COMMENT = 'A list of countries, each with the corresponding nationality.';


-- -----------------------------------------------------
-- Table `PlacesManagement`.`CountryInfo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PlacesManagement`.`CountryInfo` (
  `CountryId` BIGINT UNSIGNED NOT NULL,
  `DependenceType` ENUM('Province', 'State', 'Department', 'Other', 'None') NOT NULL DEFAULT 'Province',
  `PostalCodeType` ENUM('Postal Code', 'ZIP Code', 'None') NOT NULL DEFAULT 'None',
  `ProvinceCodeLength` TINYINT NOT NULL DEFAULT 2,
  `CityCodeLength` TINYINT NOT NULL DEFAULT 3,
  PRIMARY KEY (`CountryId`),
  CONSTRAINT `CountryInfo_Countries_CountryId_fk`
    FOREIGN KEY (`CountryId`)
    REFERENCES `PlacesManagement`.`Countries` (`CountryId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Polytics dependency hierarchy levels for countries.';


-- -----------------------------------------------------
-- Placeholder table for view `PlacesManagement`.`CountriesFull`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PlacesManagement`.`CountriesFull` (`CountryId` INT, `CODE` INT, `Name` INT, `Nationality` INT, `Dependence` INT, `PostalCode` INT, `ProvinceCodeLength` INT, `CityCodeLength` INT);
DROP TABLE IF EXISTS `PlacesManagement`.`CountriesFull`;

-- -----------------------------------------------------
-- View `PlacesManagement`.`CountriesWithInfo`
-- -----------------------------------------------------
CREATE  OR REPLACE VIEW `PlacesManagement`.`CountriesWithInfo` AS
  SELECT Country.`CountryId`, Country.`CODE`, Country.`Name`, Country.`Nationality`,
         Info.`DependenceType` AS `Dependence`,
         Info.`PostalCodeType` AS `PostalCode`,
         Info.`ProvinceCodeLength`, Info.`CityCodeLength`
    FROM `PlacesManagement`.`Countries` AS Country
      LEFT OUTER JOIN `PlacesManagement`.`CountryInfo` AS Info
      ON (Country.`CountryId` = Info.`CountryId`);


-- -----------------------------------------------------
-- Table `PlacesManagement`.`Provinces`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PlacesManagement`.`Provinces` (
  `ProvinceId` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `CountryId` BIGINT UNSIGNED NOT NULL,
  `Name` VARCHAR(32) NOT NULL,
  PRIMARY KEY (`ProvinceId`, `CountryId`),
  UNIQUE INDEX `Provinces_CountryId_Name_uk` (`CountryId` ASC, `Name` ASC),
  INDEX `Provinces_Name_ix` (`Name` ASC),
  CONSTRAINT `Provinces_Countries_CountryId_fk`
    FOREIGN KEY (`CountryId`)
    REFERENCES `PlacesManagement`.`Countries` (`CountryId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'A list of provinces, states, or departments for a given country.';


-- -----------------------------------------------------
-- Table `PlacesManagement`.`ProvinceCodes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PlacesManagement`.`ProvinceCodes` (
  `ProvinceId` BIGINT UNSIGNED NOT NULL,
  `CountryId` BIGINT UNSIGNED NOT NULL,
  `CODE` VARCHAR(3) NOT NULL,
  PRIMARY KEY (`ProvinceId`, `CountryId`),
  UNIQUE INDEX `ProvinceCodes_CountryId_CODE_uk` (`CountryId` ASC, `CODE` ASC),
  INDEX `ProvinceCodes_CODE_ix` (`CODE` ASC),
  CONSTRAINT `ProvinceCodes_Provinces_ProvinceId_CountryId_fk`
    FOREIGN KEY (`ProvinceId` , `CountryId`)
    REFERENCES `PlacesManagement`.`Provinces` (`ProvinceId` , `CountryId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'A list of province codes.';


-- -----------------------------------------------------
-- Placeholder table for view `PlacesManagement`.`ProvincesWithCodes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PlacesManagement`.`ProvincesWithCodes` (`CountryId` INT, `ProvinceId` INT, `CODE` INT, `Name` INT);
DROP TABLE IF EXISTS `PlacesManagement`.`ProvincesWithCodes`;

-- -----------------------------------------------------
-- View `PlacesManagement`.`ProvincesWithCodes`
-- -----------------------------------------------------
CREATE  OR REPLACE VIEW `PlacesManagement`.`ProvincesWithCodes` AS
  SELECT Province.`CountryId`, Province.`ProvinceId`,
         ProvinceData.`CODE`,  Province.`Name`
    FROM `PlacesManagement`.`Provinces` AS Province
	  LEFT OUTER JOIN `PlacesManagement`.`ProvinceCodes` AS ProvinceData
      ON (Province.`ProvinceId` = ProvinceData.`ProvinceId`);


-- -----------------------------------------------------
-- Table `PlacesManagement`.`Cities`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PlacesManagement`.`Cities` (
  `CityId` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `CountryId` BIGINT UNSIGNED NOT NULL,
  `ProvinceId` BIGINT UNSIGNED NULL,
  `Name` VARCHAR(64) NOT NULL,
  PRIMARY KEY (`CityId`, `CountryId`),
  INDEX `Cities_Countries_CountryId_fx` (`CountryId` ASC),
  UNIQUE INDEX `Cities_ProvinceId_Name_uk` (`ProvinceId` ASC, `Name` ASC),
  INDEX `Cities_Name_ix` (`Name` ASC),
  CONSTRAINT `Cities_Countries_CountryId_fk`
    FOREIGN KEY (`CountryId`)
    REFERENCES `PlacesManagement`.`Countries` (`CountryId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `Cities_Provinces_ProvinceId_fk`
    FOREIGN KEY (`ProvinceId`)
    REFERENCES `PlacesManagement`.`Provinces` (`ProvinceId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'A list of cities, or countys for given province and country.';


-- -----------------------------------------------------
-- Table `PlacesManagement`.`CityCodes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PlacesManagement`.`CityCodes` (
  `CityId` BIGINT UNSIGNED NOT NULL,
  `CountryId` BIGINT UNSIGNED NOT NULL,
  `CODE` VARCHAR(3) NOT NULL,
  PRIMARY KEY (`CityId`, `CountryId`),
  UNIQUE INDEX `CityCodes_CountryId_CODE_uk` (`CountryId` ASC, `CODE` ASC),
  INDEX `CityCodes_CODE_ix` (`CODE` ASC),
  CONSTRAINT `CityCodes_Cities_CityId_CountryId_fk`
    FOREIGN KEY (`CityId` , `CountryId`)
    REFERENCES `PlacesManagement`.`Cities` (`CityId` , `CountryId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'A list of city codes.';


-- -----------------------------------------------------
-- Placeholder table for view `PlacesManagement`.`CitiesWithCodes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PlacesManagement`.`CitiesWithCodes` (`CountryId` INT, `ProvinceId` INT, `CityId` INT, `CODE` INT, `Name` INT);
DROP TABLE IF EXISTS `PlacesManagement`.`CitiesWithCodes`;

-- -----------------------------------------------------
-- View `PlacesManagement`.`CitiesWithCodes`
-- -----------------------------------------------------
CREATE  OR REPLACE VIEW `PlacesManagement`.`CitiesWithCodes` AS
  SELECT City.`CountryId`, City.`ProvinceId`, City.`CityId`,
         CityData.`CODE`,  City.`Name`
    FROM `PlacesManagement`.`Cities` AS City
	  LEFT OUTER JOIN `PlacesManagement`.`CityCodes` AS CityData
      ON (City.`CityId` = CityData.`CityId`);


-- -----------------------------------------------------
-- Table `PlacesManagement`.`PostalCodes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PlacesManagement`.`PostalCodes` (
  `PostalCodeId` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `CityId` BIGINT UNSIGNED NOT NULL,
  `CountryId` BIGINT UNSIGNED NOT NULL,
  `PostalCode` VARCHAR(16) NOT NULL,
  PRIMARY KEY (`PostalCodeId`, `CityId`, `CountryId`),
  INDEX `PostalCodes_Cities_CityId_CountryId_fx` (`CityId` ASC, `CountryId` ASC),
  UNIQUE INDEX `PostalCodes_CountryId_PostalCode_uk` (`CountryId` ASC, `PostalCode` ASC),
  INDEX `PostalCodes_PostalCode_ix` (`PostalCode` ASC),
  CONSTRAINT `PostalCodes_Cities_CityId_CountryId_fk`
    FOREIGN KEY (`CityId` , `CountryId`)
    REFERENCES `PlacesManagement`.`Cities` (`CityId` , `CountryId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'A list of postal codes.';


-- -----------------------------------------------------
-- Table `PlacesManagement`.`Addresses`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PlacesManagement`.`Addresses` (
  `AddressId` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `PostalCodeType` ENUM('Postal Code', 'ZIP Code', 'None') NOT NULL DEFAULT 'None',
  `Street1` VARCHAR(128) NOT NULL,
  `Street2` VARCHAR(128) NULL DEFAULT NULL,
  `Notes` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`AddressId`))
ENGINE = InnoDB
COMMENT = 'Shared placeholder for physical addresses.';


-- -----------------------------------------------------
-- Table `PlacesManagement`.`AddressesWithPostalCode`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PlacesManagement`.`AddressesWithPostalCode` (
  `AddressId` BIGINT UNSIGNED NOT NULL,
  `PostalCodeId` BIGINT UNSIGNED NOT NULL,
  `CityId` BIGINT UNSIGNED NOT NULL,
  `CountryId` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`AddressId`),
  INDEX `AddressesWithPostalCode_PostalCodes_PostalCodeId_fx` (`PostalCodeId` ASC, `CityId` ASC, `CountryId` ASC),
  CONSTRAINT `AddressesWithPostalCode_Addresses_AddressId_fk`
    FOREIGN KEY (`AddressId`)
    REFERENCES `PlacesManagement`.`Addresses` (`AddressId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `AddressesWithPostalCode_PostalCodes_PostalCodeId_fk`
    FOREIGN KEY (`PostalCodeId` , `CityId` , `CountryId`)
    REFERENCES `PlacesManagement`.`PostalCodes` (`PostalCodeId` , `CityId` , `CountryId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `PlacesManagement`.`AddressesWithoutPostalCode`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PlacesManagement`.`AddressesWithoutPostalCode` (
  `AddressId` BIGINT UNSIGNED NOT NULL,
  `CityId` BIGINT UNSIGNED NOT NULL,
  `CountryId` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`AddressId`),
  INDEX `AddressesWithoutPostalCode_Cities_CityId_fx` (`CityId` ASC, `CountryId` ASC),
  CONSTRAINT `AddressesWithoutPostalCode_Addresses_AddressId_fk`
    FOREIGN KEY (`AddressId`)
    REFERENCES `PlacesManagement`.`Addresses` (`AddressId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `AddressesWithoutPostalCode_Cities_CityId_fk`
    FOREIGN KEY (`CityId` , `CountryId`)
    REFERENCES `PlacesManagement`.`Cities` (`CityId` , `CountryId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;

COMMIT;


START TRANSACTION;

-- -----------------------------------------------------
-- Table `UsersManagement`.`Persons`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UsersManagement`.`Persons` (
  `PersonId` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `Names` VARCHAR(32) NOT NULL COMMENT 'First name plus middle names. Otherwise religious or given names.',
  `Surnames` VARCHAR(32) NOT NULL COMMENT 'Last name and/or birth names.',
  `DateOfBirth` DATE NOT NULL COMMENT 'Date of birth.',
  `PlaceOfBirth` BIGINT UNSIGNED NOT NULL COMMENT 'Place of birth.',
  `Gender` ENUM('Male', 'Female') NOT NULL DEFAULT 'Male' COMMENT 'Gender code.',
  `Notes` TEXT NULL DEFAULT NULL COMMENT 'Related notes.',
  PRIMARY KEY (`PersonId`),
  INDEX `Persons_Cities_PlaceOfBirth_fx` (`PlaceOfBirth` ASC),
  CONSTRAINT `Persons_Cities_PlaceOfBirth_fk`
    FOREIGN KEY (`PlaceOfBirth`)
    REFERENCES `PlacesManagement`.`Cities` (`CityId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'A list of persons.';


-- -----------------------------------------------------
-- Table `UsersManagement`.`Identifications`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UsersManagement`.`Identifications` (
  `PersonId` BIGINT UNSIGNED NOT NULL,
  `CountryId` BIGINT UNSIGNED NOT NULL,
  `Number` VARCHAR(16) NOT NULL,
  `FromDate` DATE NOT NULL,
  `ToDate` DATE NULL DEFAULT NULL,
  `Comment` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`PersonId`, `CountryId`, `Number`, `FromDate`),
  INDEX `Identifications_Countries_CountryId_fx` (`CountryId` ASC),
  UNIQUE INDEX `Identifications_CountryId_Number_uk` (`CountryId` ASC, `Number` ASC),
  UNIQUE INDEX `Identifications_PersonId_CountryId_uk` (`PersonId` ASC, `CountryId` ASC),
  CONSTRAINT `Identifications_Persons_PersonId_fk`
    FOREIGN KEY (`PersonId`)
    REFERENCES `UsersManagement`.`Persons` (`PersonId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `Identifications_Countries_CountryId_fk`
    FOREIGN KEY (`CountryId`)
    REFERENCES `PlacesManagement`.`Countries` (`CountryId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UsersManagement`.`Citizenships`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UsersManagement`.`Citizenships` (
  `PersonId` BIGINT UNSIGNED NOT NULL,
  `CountryId` BIGINT UNSIGNED NOT NULL,
  `FromDate` DATE NOT NULL,
  `ToDate` DATE NULL DEFAULT NULL,
  `Comment` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`PersonId`, `CountryId`, `FromDate`),
  INDEX `Citizenships_Countries_CountryId_fx` (`CountryId` ASC),
  UNIQUE INDEX `Citizenships_PersonId_CountryId_uk` (`PersonId` ASC, `CountryId` ASC),
  CONSTRAINT `Citizenships_Persons_PersonId_fk`
    FOREIGN KEY (`PersonId`)
    REFERENCES `UsersManagement`.`Persons` (`PersonId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `Citizenships_Countries_CountryId_fk`
    FOREIGN KEY (`CountryId`)
    REFERENCES `PlacesManagement`.`Countries` (`CountryId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UsersManagement`.`MaritalStatus`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UsersManagement`.`MaritalStatus` (
  `PersonId` BIGINT UNSIGNED NOT NULL,
  `Status` ENUM('Single', 'Engaged', 'Married', 'Separated', 'Divorced', 'Widow(er)', 'Other') NOT NULL DEFAULT 'Single',
  `FromDate` DATE NOT NULL,
  `ToDate` DATE NULL DEFAULT NULL,
  `Comment` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`PersonId`, `Status`, `FromDate`),
  CONSTRAINT `MaritalStatus_Persons_PersonId_fk`
    FOREIGN KEY (`PersonId`)
    REFERENCES `UsersManagement`.`Persons` (`PersonId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UsersManagement`.`Salutations`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UsersManagement`.`Salutations` (
  `PersonId` BIGINT UNSIGNED NOT NULL,
  `Treartment` ENUM('Mr.', 'Mrs.', 'Ms.', 'Dr.') NOT NULL,
  `FromDate` DATE NOT NULL,
  `ToDate` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`PersonId`, `Treartment`, `FromDate`),
  CONSTRAINT `Salutations_Persons_PersonId_fk`
    FOREIGN KEY (`PersonId`)
    REFERENCES `UsersManagement`.`Persons` (`PersonId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UsersManagement`.`Profiles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UsersManagement`.`Profiles` (
  `PersonId` BIGINT UNSIGNED NOT NULL,
  `DisplayName` VARCHAR(64) NOT NULL COMMENT 'Name to display in the person\'s profile title.',
  `Alias` VARCHAR(32) NULL DEFAULT NULL COMMENT 'Person\'s pseudonym.',
  PRIMARY KEY (`PersonId`),
  CONSTRAINT `Profiles_Persons_PersonId_fk`
    FOREIGN KEY (`PersonId`)
    REFERENCES `UsersManagement`.`Persons` (`PersonId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UsersManagement`.`Phones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UsersManagement`.`Phones` (
  `PersonId` BIGINT UNSIGNED NOT NULL,
  `Type` ENUM('Home', 'Mobile', 'Other') NOT NULL,
  `Number` VARCHAR(24) NOT NULL,
  `FromDate` DATE NOT NULL,
  `ToDate` DATE NULL DEFAULT NULL,
  `Comment` TINYTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`PersonId`, `Number`, `Type`, `FromDate`),
  CONSTRAINT `Phones_Persons_PersonId_fk`
    FOREIGN KEY (`PersonId`)
    REFERENCES `UsersManagement`.`Persons` (`PersonId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UsersManagement`.`Emails`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UsersManagement`.`Emails` (
  `PersonId` BIGINT UNSIGNED NOT NULL,
  `URI` VARCHAR(64) NOT NULL,
  `Primary` TINYINT(1) NOT NULL DEFAULT 1,
  `FromDate` DATE NOT NULL,
  `ToDate` DATE NULL DEFAULT NULL,
  `Comment` TINYTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`PersonId`, `URI`, `Primary`, `FromDate`),
  CONSTRAINT `Emails_Persons_PersonId_fk`
    FOREIGN KEY (`PersonId`)
    REFERENCES `UsersManagement`.`Persons` (`PersonId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UsersManagement`.`Websites`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UsersManagement`.`Websites` (
  `PersonId` BIGINT UNSIGNED NOT NULL,
  `URL` VARCHAR(128) NOT NULL,
  `Type` ENUM('Facebook', 'Twitter', 'Google+', 'LinkedIn', 'Blogspot', 'Personal') NOT NULL,
  `FromDate` DATE NOT NULL,
  `ToDate` DATE NULL DEFAULT NULL,
  `Comment` TINYTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`PersonId`, `URL`, `Type`, `FromDate`),
  CONSTRAINT `Websites_Persons_PersonId_fk`
    FOREIGN KEY (`PersonId`)
    REFERENCES `UsersManagement`.`Persons` (`PersonId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UsersManagement`.`Residences`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UsersManagement`.`Residences` (
  `PersonId` BIGINT UNSIGNED NOT NULL,
  `AddressId` BIGINT UNSIGNED NOT NULL,
  `FromDate` DATETIME NOT NULL,
  `ToDate` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`PersonId`, `AddressId`, `FromDate`),
  INDEX `Residences_Addresses_AddressId_fx` (`AddressId` ASC),
  CONSTRAINT `Residences_Persons_PersonId_fk`
    FOREIGN KEY (`PersonId`)
    REFERENCES `UsersManagement`.`Persons` (`PersonId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `Residences_Addresses_AddressId_fk`
    FOREIGN KEY (`AddressId`)
    REFERENCES `PlacesManagement`.`Addresses` (`AddressId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UsersManagement`.`Users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UsersManagement`.`Users` (
  `UserId` BIGINT UNSIGNED NOT NULL,
  `UserName` VARCHAR(64) BINARY NOT NULL,
  `PassWord` VARCHAR(64) BINARY NOT NULL,
  `ProfileName` VARCHAR(128) NOT NULL,
  `SecurityMail` VARCHAR(64) NOT NULL,
  `CreatedOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Comments` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`UserId`),
  UNIQUE INDEX `Users_UserName_uk` (`UserName` ASC),
  CONSTRAINT `Users_Persons_UserId_fk`
    FOREIGN KEY (`UserId`)
    REFERENCES `UsersManagement`.`Persons` (`PersonId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'A set of users. A user is a subject generally in the form of a person, process, or device, that causes data to flow among objects or changes the system state. An user is any active entity who interacts directly with the system.';

COMMIT;


START TRANSACTION;

-- -----------------------------------------------------
-- Table `AccountsManagement`.`Categories`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccountsManagement`.`Categories` (
  `CategoryId` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID for this category.',
  `Name` VARCHAR(32) NOT NULL COMMENT 'Unique name for this category.',
  `AccountType` ENUM('Individual', 'Corporate', 'Both', 'System') NOT NULL DEFAULT 'Both',
  `Visibility` ENUM('Public', 'Hidden', 'Private') NOT NULL DEFAULT 'Public' COMMENT 'Visibility of this category.',
  `Description` TEXT NULL DEFAULT NULL COMMENT 'Description for this category.',
  PRIMARY KEY (`CategoryId`),
  UNIQUE INDEX `Categories_Name_uk` (`Name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `AccountsManagement`.`Contracts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccountsManagement`.`Contracts` (
  `ContractId` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID for this contract.',
  `CategoryId` BIGINT UNSIGNED NOT NULL COMMENT 'ID for the contract\'s account category.',
  `Name` VARCHAR(32) NOT NULL COMMENT 'Unique name for this contract.',
  `Visibility` ENUM('Public', 'Hidden', 'Private') NOT NULL DEFAULT 'Public' COMMENT 'Visibility of this Contract.',
  `Description` TEXT NULL DEFAULT NULL COMMENT 'Description for this Contract.',
  PRIMARY KEY (`ContractId`, `CategoryId`),
  INDEX `Contracts_Categories_CategoryId_fx` (`CategoryId` ASC),
  UNIQUE INDEX `Contracts_Name_uk` (`Name` ASC),
  CONSTRAINT `Contracts_Categories_CategoryId_fk`
    FOREIGN KEY (`CategoryId`)
    REFERENCES `AccountsManagement`.`Categories` (`CategoryId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `AccountsManagement`.`ContractDetails`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccountsManagement`.`ContractDetails` (
  `ContractId` BIGINT UNSIGNED NOT NULL,
  `CategoryId` BIGINT UNSIGNED NOT NULL,
  `MaxUsers` INT(11) NOT NULL DEFAULT -1,
  `MaxStudents` INT(11) NOT NULL DEFAULT -1,
  `MaxAssignatres` INT(11) NOT NULL DEFAULT -1,
  `MaxCourses` INT(11) NOT NULL DEFAULT -1,
  `etc` TINYTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`ContractId`, `CategoryId`),
  CONSTRAINT `ContractDetails_Contracts_ContractId_CategoryId_fk`
    FOREIGN KEY (`ContractId` , `CategoryId`)
    REFERENCES `AccountsManagement`.`Contracts` (`ContractId` , `CategoryId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `AccountsManagement`.`Accounts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccountsManagement`.`Accounts` (
  `AccountId` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID for this account.',
  `CategoryId` BIGINT UNSIGNED NOT NULL COMMENT 'ID of the account\'s category.',
  `ContractId` BIGINT UNSIGNED NOT NULL COMMENT 'ID of the account\'s contract.',
  `DisplayName` VARCHAR(64) NOT NULL COMMENT 'Unique name for this account.',
  `AccountSpace` VARCHAR(32) NOT NULL COMMENT 'MD5 Hash name for the account, it is also the name of the schema associated with the account.',
  `State` ENUM('Active', 'Inactive', 'Locked') NOT NULL DEFAULT 'Inactive' COMMENT 'TRUE if this account is locked by the service provider.',
  `Visibility` ENUM('Public', 'Hidden', 'Private') NOT NULL DEFAULT 'Public',
  `CreatedOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`AccountId`),
  INDEX `Accounts_Contracts_ContractId_CategoryId_fx` (`CategoryId` ASC, `ContractId` ASC),
  UNIQUE INDEX `Accounts_DisplayName_uk` (`DisplayName` ASC),
  UNIQUE INDEX `Accounts_AccountSpace_uk` (`AccountSpace` ASC),
  CONSTRAINT `Accounts_Contracts_ContractId_CategoryId_fk`
    FOREIGN KEY (`CategoryId` , `ContractId`)
    REFERENCES `AccountsManagement`.`Contracts` (`CategoryId` , `ContractId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `AccountsManagement`.`AccountDetails`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccountsManagement`.`AccountDetails` (
  `AccountId` BIGINT UNSIGNED NOT NULL,
  `IDC` VARCHAR(16) NOT NULL COMMENT 'Contributor ID.',
  `Comments` TEXT NULL DEFAULT NULL COMMENT 'Any comment about the account status.',
  `etc` TINYTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`AccountId`),
  UNIQUE INDEX `AccountDetails_IDC_uk` (`IDC` ASC),
  CONSTRAINT `AccountDetails_Accounts_AccountId_fk`
    FOREIGN KEY (`AccountId`)
    REFERENCES `AccountsManagement`.`Accounts` (`AccountId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `AccountsManagement`.`CorporateAccounts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccountsManagement`.`CorporateAccounts` (
  `AccountId` BIGINT UNSIGNED NOT NULL,
  `InstitutionName` VARCHAR(64) NOT NULL,
  `InstitutionType` ENUM('University', 'Highschool', 'Midleschool', 'Elementary', 'Surveys', 'Exams', 'Opscan') NOT NULL,
  `etc` TINYTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`AccountId`),
  CONSTRAINT `CorporateAccount_Accounts_AccountId_fk`
    FOREIGN KEY (`AccountId`)
    REFERENCES `AccountsManagement`.`Accounts` (`AccountId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `AccountsManagement`.`IndividualAccounts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccountsManagement`.`IndividualAccounts` (
  `AccountId` BIGINT UNSIGNED NOT NULL,
  `etc` TINYTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`AccountId`),
  CONSTRAINT `IndividualAccount_Accounts_AccountId_fk`
    FOREIGN KEY (`AccountId`)
    REFERENCES `AccountsManagement`.`Accounts` (`AccountId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `AccountsManagement`.`AccountAddresses`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccountsManagement`.`AccountAddresses` (
  `AccountId` BIGINT UNSIGNED NOT NULL,
  `AddressId` BIGINT UNSIGNED NOT NULL,
  `FromDate` DATETIME NOT NULL,
  `ToDate` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`AccountId`, `AddressId`, `FromDate`),
  INDEX `AccountAddresses_Addresses_AddressId_fx` (`AddressId` ASC),
  CONSTRAINT `AccountAddresses_Accounts_AccountId_fk`
    FOREIGN KEY (`AccountId`)
    REFERENCES `AccountsManagement`.`Accounts` (`AccountId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `AccountAddresses_Addresses_AddressId_fk`
    FOREIGN KEY (`AddressId`)
    REFERENCES `PlacesManagement`.`Addresses` (`AddressId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;

COMMIT;


START TRANSACTION;

-- -----------------------------------------------------
-- Table `AccessControl`.`Chairs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccessControl`.`Chairs` (
  `ChairId` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(64) NOT NULL,
  `CreatedOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`ChairId`),
  UNIQUE INDEX `Chairs_Name_uk` (`Name` ASC))
ENGINE = InnoDB
COMMENT = 'A set of chairs. A chair is a constraint or relationship between or among roles.';


-- -----------------------------------------------------
-- Table `AccessControl`.`AccountChairs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccessControl`.`AccountChairs` (
  `AccountId` BIGINT UNSIGNED NOT NULL,
  `ChairId` BIGINT UNSIGNED NOT NULL,
  `AssignedOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`AccountId`, `ChairId`),
  INDEX `AccountChairs_Chairs_ChairId_fx` (`ChairId` ASC),
  CONSTRAINT `AccountChairs_Accounts_AccountId_fk`
    FOREIGN KEY (`AccountId`)
    REFERENCES `AccountsManagement`.`Accounts` (`AccountId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `AccountChairs_Chairs_ChairId_fk`
    FOREIGN KEY (`ChairId`)
    REFERENCES `AccessControl`.`Chairs` (`ChairId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Account/Chair mapping. An association of a subset of the set of chairs to a given account.';


-- -----------------------------------------------------
-- Table `AccessControl`.`UserChairs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccessControl`.`UserChairs` (
  `UserChairId` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `AccountId` BIGINT UNSIGNED NOT NULL,
  `ChairId` BIGINT UNSIGNED NOT NULL,
  `UserId` BIGINT UNSIGNED NOT NULL,
  `TakenAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`UserChairId`),
  INDEX `UserChairs_AccountChairs_AccountId_ChairId_fx` (`AccountId` ASC, `ChairId` ASC),
  INDEX `UserChairs_Users_UserId_fx` (`UserId` ASC),
  UNIQUE INDEX `UserChairs_AccountId_ChairId_UserId_uk` (`AccountId` ASC, `ChairId` ASC, `UserId` ASC),
  CONSTRAINT `UserChairs_AccountChairs_AccountId_ChairId_fk`
    FOREIGN KEY (`AccountId`, `ChairId`)
    REFERENCES `AccessControl`.`AccountChairs` (`AccountId`, `ChairId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `UserChairs_Users_UserId_fk`
    FOREIGN KEY (`UserId`)
    REFERENCES `UsersManagement`.`Users` (`UserId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'User/Account Chair mapping. An association between a subset of the set of users t a given account chair.';


-- -----------------------------------------------------
-- Table `AccessControl`.`Roles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccessControl`.`Roles` (
  `RoleId` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(64) BINARY NOT NULL,
  `CreatedOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`RoleId`),
  UNIQUE INDEX `Roles_Name_uk` (`Name` ASC))
ENGINE = InnoDB
COMMENT = 'A set of roles. A role is a job function wirhin the system that describes the authority and responsability conferred on a user assigned to the role.';


-- -----------------------------------------------------
-- Table `AccessControl`.`SystemRoles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccessControl`.`SystemRoles` (
  `RoleId` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`RoleId`),
  CONSTRAINT `SystemRoles_Roles_RoleId_fk1`
    FOREIGN KEY (`RoleId`)
    REFERENCES `AccessControl`.`Roles` (`RoleId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'A hierarchy of system roles, i.e., a partial order relationship established among system roles.';


-- -----------------------------------------------------
-- Table `AccessControl`.`ParentSystemRoles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccessControl`.`ParentSystemRoles` (
  `RoleId` BIGINT UNSIGNED NOT NULL,
  `BaseRoleId` BIGINT UNSIGNED NOT NULL,
  `AssignedOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`RoleId`, `BaseRoleId`),
  INDEX `ParentSystemRoles_SystemRoles_BaseRoleId_fx` (`BaseRoleId` ASC),
  CONSTRAINT `ParentSystemRoles_SystemRoles_RoleId_fk`
    FOREIGN KEY (`RoleId`)
    REFERENCES `AccessControl`.`SystemRoles` (`RoleId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `ParentSystemRoles_SystemRoles_BaseRoleId_fk`
    FOREIGN KEY (`BaseRoleId`)
    REFERENCES `AccessControl`.`SystemRoles` (`RoleId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'The set of parent roles for a given system role.';


-- -----------------------------------------------------
-- Table `AccessControl`.`ClientRoles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccessControl`.`ClientRoles` (
  `RoleId` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`RoleId`),
  CONSTRAINT `ClientRoles_Roles_RoleId_fk1`
    FOREIGN KEY (`RoleId`)
    REFERENCES `AccessControl`.`Roles` (`RoleId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'A hierarchy of client roles, i.e., a partial order relationship established among clent roles.';


-- -----------------------------------------------------
-- Table `AccessControl`.`ParentClientRoles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccessControl`.`ParentClientRoles` (
  `RoleId` BIGINT UNSIGNED NOT NULL,
  `BaseRoleId` BIGINT UNSIGNED NOT NULL,
  `AssignedOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`RoleId`, `BaseRoleId`),
  INDEX `ParentClientRoles_ClientRoles_BaseRoleId_fx` (`BaseRoleId` ASC),
  CONSTRAINT `ParentClientRoles_ClientRoles_RoleId_fk`
    FOREIGN KEY (`RoleId`)
    REFERENCES `AccessControl`.`ClientRoles` (`RoleId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `ParentClientRoles_ClientRoles_BaseRoleId_fk`
    FOREIGN KEY (`BaseRoleId`)
    REFERENCES `AccessControl`.`ClientRoles` (`RoleId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'The set of parent roles for a given client role.';


-- -----------------------------------------------------
-- Table `AccessControl`.`ChairRoles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccessControl`.`ChairRoles` (
  `RoleId` BIGINT UNSIGNED NOT NULL,
  `ChairId` BIGINT UNSIGNED NOT NULL,
  `AssignedOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`RoleId`, `ChairId`),
  INDEX `ChairRoles_Chairs_ChairId_fx` (`ChairId` ASC),
  CONSTRAINT `UserRoles_Roles_RoleId_fk`
    FOREIGN KEY (`RoleId`)
    REFERENCES `AccessControl`.`Roles` (`RoleId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `ChairRoles_Chairs_ChairId_fk`
    FOREIGN KEY (`ChairId`)
    REFERENCES `AccessControl`.`Chairs` (`ChairId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Chair/Role mapping. A subset of the set of roles assigned to a chair.';


-- -----------------------------------------------------
-- Table `AccessControl`.`ObjectTypes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccessControl`.`ObjectTypes` (
  `ObjectTypeId` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(32) NOT NULL,
  `Description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`ObjectTypeId`),
  UNIQUE INDEX `Name_UNIQUE` (`Name` ASC))
ENGINE = InnoDB
COMMENT = 'A set of object types.';


-- -----------------------------------------------------
-- Table `AccessControl`.`Objects`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccessControl`.`Objects` (
  `ObjectId` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `ObjectTypeId` BIGINT UNSIGNED NOT NULL,
  `Name` VARCHAR(64) BINARY NOT NULL,
  `CreatedOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`ObjectId`),
  UNIQUE INDEX `Objects_Name_uk` (`Name` ASC),
  INDEX `Objects_ObjectTypes_ObjectTypeId_fx` (`ObjectTypeId` ASC),
  CONSTRAINT `Objects_ObjectTypes_ObjectTypeId_fk`
    FOREIGN KEY (`ObjectTypeId`)
    REFERENCES `AccessControl`.`ObjectTypes` (`ObjectTypeId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'A set of objects. An object is a passive entity that contains or receive data.';


-- -----------------------------------------------------
-- Table `AccessControl`.`Operations`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccessControl`.`Operations` (
  `OperationId` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `ObjectTypeId` BIGINT UNSIGNED NOT NULL,
  `Name` VARCHAR(64) BINARY NOT NULL,
  `CreatedOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`OperationId`),
  UNIQUE INDEX `Operations_Name_uk` (`Name` ASC),
  INDEX `Operations_ObjectTypes_ObjectTypeId_fx` (`ObjectTypeId` ASC),
  CONSTRAINT `Operations_ObjectTypes_ObjectTypeId_fk`
    FOREIGN KEY (`ObjectTypeId`)
    REFERENCES `AccessControl`.`ObjectTypes` (`ObjectTypeId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'A set of operations. An operation is an action that may be executed on or applied to a object to change its state.';


-- -----------------------------------------------------
-- Table `AccessControl`.`Permissions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccessControl`.`Permissions` (
  `PermissionId` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(64) BINARY NOT NULL,
  `CreatedOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`PermissionId`),
  UNIQUE INDEX `Permissions_Name_uk` (`Name` ASC))
ENGINE = InnoDB
COMMENT = 'A set of permissions. A permision is a descriptions of the type of authorised interactions a subject can have with an object.';


-- -----------------------------------------------------
-- Table `AccessControl`.`ObjectPermissions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccessControl`.`ObjectPermissions` (
  `PermissionId` BIGINT UNSIGNED NOT NULL,
  `ObjectId` BIGINT UNSIGNED NOT NULL,
  `AssignedOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`PermissionId`, `ObjectId`),
  INDEX `ObjectPermissions_Objects_ObjectId_fx` (`ObjectId` ASC),
  CONSTRAINT `ObjectPermissions_Permissions_PermissionId_fk`
    FOREIGN KEY (`PermissionId`)
    REFERENCES `AccessControl`.`Permissions` (`PermissionId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `ObjectPermissions_Objects_ObjectId_fk`
    FOREIGN KEY (`ObjectId`)
    REFERENCES `AccessControl`.`Objects` (`ObjectId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Object/Permission mapping. A subset of the set of objects on which a subset of operations is apllied to.';


-- -----------------------------------------------------
-- Table `AccessControl`.`OperationPermissions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccessControl`.`OperationPermissions` (
  `PermissionId` BIGINT UNSIGNED NOT NULL,
  `OperationId` BIGINT UNSIGNED NOT NULL,
  `AssignedOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`PermissionId`, `OperationId`),
  INDEX `OperationPermissions_Operations_OperationId_fx` (`OperationId` ASC),
  CONSTRAINT `OperationPermissions_Permissions_PermissionId_fk`
    FOREIGN KEY (`PermissionId`)
    REFERENCES `AccessControl`.`Permissions` (`PermissionId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `OperationPermissions_Operations_OperationId_fk`
    FOREIGN KEY (`OperationId`)
    REFERENCES `AccessControl`.`Operations` (`OperationId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Operation/Permission mapping. A subset of the set of operations that can be apllied to a subset of objects.';


-- -----------------------------------------------------
-- Table `AccessControl`.`RolePermissions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccessControl`.`RolePermissions` (
  `RoleId` BIGINT UNSIGNED NOT NULL,
  `PermissionId` BIGINT UNSIGNED NOT NULL,
  `AssignedOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`RoleId`, `PermissionId`),
  INDEX `RolePermissions_Permissions_PermissionId_fx` (`PermissionId` ASC),
  CONSTRAINT `RolePermissions_Roles_RoleId_fk`
    FOREIGN KEY (`RoleId`)
    REFERENCES `AccessControl`.`Roles` (`RoleId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `RolePermissions_Permissions_PermissionId_fk`
    FOREIGN KEY (`PermissionId`)
    REFERENCES `AccessControl`.`Permissions` (`PermissionId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Role/Permission mapping. A subset of the set of permissions assigned to a role.';


-- -----------------------------------------------------
-- Table `AccessControl`.`UserChairPermissions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccessControl`.`UserChairPermissions` (
  `UserChairId` BIGINT UNSIGNED NOT NULL,
  `PermissionId` BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (`UserChairId`, `PermissionId`),
  INDEX `UserChairPermissions_Permissions_PermissionId_fx` (`PermissionId` ASC),
  CONSTRAINT `UserChairPermissions_UserChairs_UserChairId_fk`
    FOREIGN KEY (`UserChairId`)
    REFERENCES `AccessControl`.`UserChairs` (`UserChairId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `UserChairPermissions_Permissions_PermissionId_fk`
    FOREIGN KEY (`PermissionId`)
    REFERENCES `AccessControl`.`Permissions` (`PermissionId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'User Chair/Permission mapping. A subset of permission exclusively assigned to a user chair.';


-- -----------------------------------------------------
-- Table `AccessControl`.`Sessions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccessControl`.`Sessions` (
  `SessionId` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `UserChairId` BIGINT UNSIGNED NOT NULL,
  `StartedOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`SessionId`),
  INDEX `Sessions_UserChairs_UserChairId_fx` (`UserChairId` ASC),
  CONSTRAINT `Sessions_UserChairs_UserChairId_fk`
    FOREIGN KEY (`UserChairId`)
    REFERENCES `AccessControl`.`UserChairs` (`UserChairId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Role activation constraints. A mapping between an account user and an activated subset of the set of roles, or chair, the user is assigned to.';

COMMIT;


-- SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION;
-- SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS;
-- SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT;
-- SET SQL_MODE=@OLD_SQL_MODE;
-- SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
-- SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


START TRANSACTION;

-- -----------------------------------------------------
-- Triggers
-- -----------------------------------------------------
DELIMITER $$

-- -----------------------------------------------------
-- Table `AccessControl`.`tr_ParentSystemRoles_BINS`
-- -----------------------------------------------------
CREATE TRIGGER `AccessControl`.`tr_ParentSystemRoles_BINS` BEFORE INSERT ON `AccessControl`.`ParentSystemRoles` FOR EACH ROW
-- Emulates the CHECK (RoleId <> BaseRoleId) constraint
BEGIN
    IF (NEW.`RoleId` = NEW.`BaseRoleId`) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'CHECK constraint on ParentSystemRoles failed', CONSTRAINT_NAME = 'CHECK';
    END IF;
END$$


-- -----------------------------------------------------
-- Table `AccessControl`.`tr_ParentSystemRoles_BUPD`
-- -----------------------------------------------------
CREATE TRIGGER `AccessControl`.`tr_ParentSystemRoles_BUPD` BEFORE UPDATE ON `AccessControl`.`ParentSystemRoles` FOR EACH ROW
-- Emulates the CHECK (RoleId <> BaseRoleId) constraint
BEGIN
    IF (NEW.`RoleId` = NEW.`BaseRoleId`) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'CHECK constraint on ParentSystemRoles failed';
    END IF;
END$$


-- -----------------------------------------------------
-- Table `AccessControl`.`tr_ParentClientRoles_BINS`
-- -----------------------------------------------------
CREATE TRIGGER `AccessControl`.`tr_ParentClientRoles_BINS` BEFORE INSERT ON `AccessControl`.`ParentClientRoles` FOR EACH ROW
-- Emulates the CHECK (RoleId <> BaseRoleId) constraint
BEGIN
    IF (NEW.`RoleId` = NEW.`BaseRoleId`) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'CHECK constraint on ParentClientRoles failed', CONSTRAINT_NAME = 'CHECK';
    END IF;
END$$


-- -----------------------------------------------------
-- Table `AccessControl`.`tr_ParentClientRoles_BUPD`
-- -----------------------------------------------------
CREATE TRIGGER `AccessControl`.`tr_ParentClientRoles_BUPD` BEFORE UPDATE ON `AccessControl`.`ParentClientRoles` FOR EACH ROW
-- Emulates the CHECK (RoleId <> BaseRoleId) constraint
BEGIN
    IF (NEW.`RoleId` = NEW.`BaseRoleId`) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'CHECK constraint on ParentClientRoles failed';
    END IF;
END$$


DELIMITER ;

COMMIT;


START TRANSACTION;

-- -----------------------------------------------------
-- Create DB users
-- -----------------------------------------------------
DROP USER `OG.WebClient`@`localhost`, `OG.WebService`@`localhost`,
          `OG.WebAdmin`@`localhost`, `OG.Developer`@`localhost`,
		  `OG.Manager`@`localhost`;

CREATE USER `OG.WebClient`@`localhost` IDENTIFIED BY PASSWORD '*00A51F3F48415C7D4E8908980D443C29C69B60C9',
  `OG.WebService`@`localhost` IDENTIFIED BY PASSWORD '*00A51F3F48415C7D4E8908980D443C29C69B60C9',
  `OG.WebAdmin`@`localhost` IDENTIFIED BY PASSWORD '*00A51F3F48415C7D4E8908980D443C29C69B60C9',
  `OG.Developer`@`localhost` IDENTIFIED BY PASSWORD '*00A51F3F48415C7D4E8908980D443C29C69B60C9',
  `OG.Manager`@`localhost` IDENTIFIED BY PASSWORD '*00A51F3F48415C7D4E8908980D443C29C69B60C9';

GRANT SELECT ON `PlacesManagement`.* TO `OG.WebClient`@`localhost`;
GRANT INSERT, SELECT, UPDATE ON `UsersManagement`.* TO `OG.WebClient`@`localhost`;
GRANT SELECT, UPDATE ON `AccountsManagement`.* TO `OG.WebClient`@`localhost`;
GRANT INSERT, SELECT ON `AccessControl`.* TO `OG.WebClient`@`localhost`;

GRANT INSERT, SELECT, UPDATE ON `PlacesManagement`.* TO `OG.WebService`@`localhost`;
GRANT INSERT, SELECT, UPDATE ON `UsersManagement`.* TO `OG.WebService`@`localhost`;
GRANT INSERT, SELECT, UPDATE ON `AccountsManagement`.* TO `OG.WebService`@`localhost`;
GRANT INSERT, SELECT, UPDATE ON `AccessControl`.* TO `OG.WebService`@`localhost`;

GRANT INSERT, SELECT, UPDATE, DELETE ON `PlacesManagement`.* TO `OG.WebAdmin`@`localhost`;
GRANT INSERT, SELECT, UPDATE, DELETE ON `UsersManagement`.* TO `OG.WebAdmin`@`localhost`;
GRANT INSERT, SELECT, UPDATE, DELETE ON `AccountsManagement`.* TO `OG.WebAdmin`@`localhost`;
GRANT INSERT, SELECT, UPDATE, DELETE ON `AccessControl`.* TO `OG.WebAdmin`@`localhost`;

GRANT ALL PRIVILEGES ON `PlacesManagement`.* TO `OG.Developer`@`localhost`;
GRANT ALL PRIVILEGES ON `UsersManagement`.* TO `OG.Developer`@`localhost`;
GRANT ALL PRIVILEGES ON `AccountsManagement`.* TO `OG.Developer`@`localhost`;
GRANT ALL PRIVILEGES ON `AccessControl`.* TO `OG.Developer`@`localhost`;

GRANT ALL PRIVILEGES ON `PlacesManagement`.* TO `OG.Manager`@`localhost` WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON `UsersManagement`.* TO `OG.Manager`@`localhost` WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON `AccountsManagement`.* TO `OG.Manager`@`localhost` WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON `AccessControl`.* TO `OG.Manager`@`localhost` WITH GRANT OPTION;

FLUSH PRIVILEGES;

COMMIT;


-- --------------------------------------------------------
-- Host:                         127.0.0.1
-- Server:                       localhost
-- Port:                         3306
-- Server version:               5.6.12-log - MySQL Community Server (GPL)
-- Server OS:                    Windows 7 - 32bit
-- MySQL Workbench version:      6.1.4.11773 Community build 1454
-- HeidiSQL version:             6.0.0.4024
-- phpMyAdmin version:           4.0.4
-- PHP version:                  5.4.16
-- Date/time:                    2014-04-30 18:35:19
-- --------------------------------------------------------
