-- MySQL Script generated by MySQL Workbench
-- 04/20/14 10:12:00
-- Model: OptiGrade â€” Role Based Access Control Data Model    Version: 1.0

-- OptiGrade 3.0 is an on-line service for remote evaluation of multi-choice exams using desktop optical mark recognition technology with an Internet (Web) application front-end.
-- 
-- This is a data model for Role Based Access Control. It is based on the NIST RBAC standard. More info about this standard can be found here: http://csrc.nist.gov/groups/SNS/rbac/.

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema OptiGrade
-- -----------------------------------------------------
-- Schema for OptiGrade 3.0 On-line Service. (Role Based Access Control tables)
-- 
-- Naming convention
-- -----------------------
-- 
-- 1. Plural names for tables, use singular aliases for entities or objects.
-- 2. Singular names for columns.
-- 3. No prefixes for table or column names, except for primary and foreign key columns; use singular prefix.
-- 4. Pascal casing (upper camel casing).
-- 
-- Column ordering (sugested)
-- ---------------------------------
-- 
-- 1. Primary key, including multi-field primary keys that include foreign keys.
-- 2. Unique index.
-- 3. Foreign key.
-- 4. User generated data.
-- 5. System generated data (non-boolean, boolean).
-- 6. Timestamps, etc.
-- 
-- Relation and Index names
-- -------------------------------
-- 
-- Foreign key relation: fk_RefererentTable_ReferencedTable
-- Foreign key index:    fk_RefererentTable_ReferencedTable_idx
-- Unique columns:        FirstColumnName_SecondColumnName_UNIQUE
-- 
CREATE SCHEMA IF NOT EXISTS `OptiGrade` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `OptiGrade` ;

-- -----------------------------------------------------
-- Table `Users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Users` (
  `UserId` INT NOT NULL AUTO_INCREMENT,
  `Username` VARCHAR(48) BINARY NOT NULL,
  `Password` VARCHAR(64) BINARY NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  PRIMARY KEY (`UserId`),
  UNIQUE INDEX `Username_UNIQUE` (`Username` ASC))
ENGINE = InnoDB
COMMENT = 'A set of subjects. A subject is an active entity, generally in the form of a user, process, or device, that causes data to flow among objects or changes the system state. An user is any person who interacts directly with the system.';


-- -----------------------------------------------------
-- Table `Roles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Roles` (
  `RoleId` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(128) BINARY NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `Description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`RoleId`),
  UNIQUE INDEX `Name_UNIQUE` (`Name` ASC))
ENGINE = InnoDB
COMMENT = 'Role constraints: a relationship between or among roles. Role hierarchy: a partial order relationship established among roles. A role is a job function wirhin the system that describes the authority and responsability conferred on a user assigned to the role.';


-- -----------------------------------------------------
-- Table `Objects`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Objects` (
  `ObjectId` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(128) BINARY NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `Description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`ObjectId`),
  UNIQUE INDEX `Name_UNIQUE` (`Name` ASC))
ENGINE = InnoDB
COMMENT = 'A set of objects. An object is a passive entity that contains or receive data.';


-- -----------------------------------------------------
-- Table `Operations`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Operations` (
  `OperationId` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(128) BINARY NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `Description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`OperationId`),
  UNIQUE INDEX `Name_UNIQUE` (`Name` ASC))
ENGINE = InnoDB
COMMENT = 'A set of actions that may be executed on objects.';


-- -----------------------------------------------------
-- Table `Permissions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Permissions` (
  `PermissionId` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(128) BINARY NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `Description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`PermissionId`),
  UNIQUE INDEX `Name_UNIQUE` (`Name` ASC))
ENGINE = InnoDB
COMMENT = 'A set of descriptions of the type of authorised interactions a subject can have with an object.';


-- -----------------------------------------------------
-- Table `ObjectPermissions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ObjectPermissions` (
  `ObjectId` INT NOT NULL,
  `PermissionId` INT NOT NULL,
  `AssignedOn` DATETIME NOT NULL,
  PRIMARY KEY (`ObjectId`, `PermissionId`),
  INDEX `fk_ObjectPermissions_Permissions_idx` (`PermissionId` ASC),
  CONSTRAINT `fk_ObjectPermissions_Objects`
    FOREIGN KEY (`ObjectId`)
    REFERENCES `Objects` (`ObjectId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_ObjectPermissions_Permissions`
    FOREIGN KEY (`PermissionId`)
    REFERENCES `Permissions` (`PermissionId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Object/Permission mapping,';


-- -----------------------------------------------------
-- Table `OperationPermissions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `OperationPermissions` (
  `OperationId` INT NOT NULL,
  `PermissionId` INT NOT NULL,
  `AssignedOn` DATETIME NOT NULL,
  PRIMARY KEY (`OperationId`, `PermissionId`),
  INDEX `fk_OperationPermissions_Permissions_idx` (`PermissionId` ASC),
  CONSTRAINT `fk_OperationPermissions_Operations`
    FOREIGN KEY (`OperationId`)
    REFERENCES `Operations` (`OperationId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_OperationPermissions_Permissions`
    FOREIGN KEY (`PermissionId`)
    REFERENCES `Permissions` (`PermissionId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Operation/Permission mapping.';


-- -----------------------------------------------------
-- Table `RolePermissions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RolePermissions` (
  `RoleId` INT NOT NULL,
  `PermissionId` INT NOT NULL,
  `AssignedOn` DATETIME NOT NULL,
  PRIMARY KEY (`RoleId`, `PermissionId`),
  INDEX `fk_RolePermissions_Permissions_idx` (`PermissionId` ASC),
  CONSTRAINT `fk_RolePermissions_Roles`
    FOREIGN KEY (`RoleId`)
    REFERENCES `Roles` (`RoleId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_RolePermissions_Permissions`
    FOREIGN KEY (`PermissionId`)
    REFERENCES `Permissions` (`PermissionId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Role permission assignments.';


-- -----------------------------------------------------
-- Table `Accounts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Accounts` (
  `AccountId` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(48) NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  PRIMARY KEY (`AccountId`),
  UNIQUE INDEX `Name_UNIQUE` (`Name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UserRoles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UserRoles` (
  `AccountId` INT NOT NULL,
  `UserId` INT NOT NULL,
  `RoleId` INT NOT NULL,
  `Default` TINYINT(1) NULL,
  `AssignedOn` DATETIME NOT NULL,
  PRIMARY KEY (`AccountId`, `UserId`, `RoleId`),
  INDEX `fk_UserRoles_Users_idx` (`UserId` ASC),
  INDEX `fk_UserRoles_Roles_idx` (`RoleId` ASC),
  UNIQUE INDEX `AccountId_UserId_Default_UNIQUE` (`AccountId` ASC, `UserId` ASC, `Default` ASC),
  CONSTRAINT `fk_UserRoles_Accounts`
    FOREIGN KEY (`AccountId`)
    REFERENCES `Accounts` (`AccountId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_UserRoles_Users`
    FOREIGN KEY (`UserId`)
    REFERENCES `Users` (`UserId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_UserRoles_Roles`
    FOREIGN KEY (`RoleId`)
    REFERENCES `Roles` (`RoleId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'User/Role assignments.';


-- -----------------------------------------------------
-- Table `AccountUsers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AccountUsers` (
  `AccountId` INT NOT NULL,
  `UserId` INT NOT NULL,
  `AssignedOn` DATETIME NOT NULL,
  PRIMARY KEY (`AccountId`, `UserId`),
  INDEX `fk_AccountUsers_Users_idx` (`UserId` ASC),
  CONSTRAINT `fk_AccountUsers_Accounts`
    FOREIGN KEY (`AccountId`)
    REFERENCES `Accounts` (`AccountId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_AccountUsers_Users`
    FOREIGN KEY (`UserId`)
    REFERENCES `Users` (`UserId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Sessions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Sessions` (
  `SessionId` INT NOT NULL AUTO_INCREMENT,
  `AccountId` INT NOT NULL,
  `UserId` INT NOT NULL,
  `Name` VARCHAR(64) NOT NULL,
  `StartedOn` DATETIME NOT NULL,
  PRIMARY KEY (`SessionId`),
  UNIQUE INDEX `Name_UNIQUE` (`Name` ASC),
  INDEX `fk_Sessions_AccountUsers_idx` (`AccountId` ASC, `UserId` ASC),
  CONSTRAINT `fk_Sessions_AccountUsers`
    FOREIGN KEY (`AccountId` , `UserId`)
    REFERENCES `AccountUsers` (`AccountId` , `UserId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'A mapping between a user and an activated subset of the set of roles the user is assigned to.';


-- -----------------------------------------------------
-- Table `SessionRoles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SessionRoles` (
  `SessionId` INT NOT NULL,
  `RoleId` INT NOT NULL,
  `TakenAt` DATETIME NOT NULL,
  PRIMARY KEY (`SessionId`, `RoleId`, `TakenAt`),
  INDEX `fk_SessionRoles_Roles_idx` (`RoleId` ASC),
  CONSTRAINT `fk_SessionRoles_Sessions`
    FOREIGN KEY (`SessionId`)
    REFERENCES `Sessions` (`SessionId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_SessionRoles_Roles`
    FOREIGN KEY (`RoleId`)
    REFERENCES `Roles` (`RoleId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Role activation constraints. An activated subset of the set of roles a user is assigned to.';


-- -----------------------------------------------------
-- Table `ParentRoles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ParentRoles` (
  `RoleId` INT NOT NULL,
  `BaseRoleId` INT NOT NULL,
  `AssignedOn` DATETIME NOT NULL,
  PRIMARY KEY (`RoleId`, `BaseRoleId`),
  INDEX `fk_ParentRoles_Roles2_idx` (`BaseRoleId` ASC),
  CONSTRAINT `fk_ParentRoles_Roles1`
    FOREIGN KEY (`RoleId`)
    REFERENCES `Roles` (`RoleId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_ParentRoles_Roles2`
    FOREIGN KEY (`BaseRoleId`)
    REFERENCES `Roles` (`RoleId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `UserPermissions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UserPermissions` (
  `UserId` INT NOT NULL,
  `PermissionId` INT NOT NULL,
  `AssignedOn` DATETIME NOT NULL,
  PRIMARY KEY (`UserId`, `PermissionId`),
  INDEX `fk_UserPermissions_Permissions_idx` (`PermissionId` ASC),
  CONSTRAINT `fk_UserPermissions_Users`
    FOREIGN KEY (`UserId`)
    REFERENCES `Users` (`UserId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_UserPermissions_Permissions`
    FOREIGN KEY (`PermissionId`)
    REFERENCES `Permissions` (`PermissionId`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
USE `OptiGrade`;

DELIMITER $$
USE `OptiGrade`$$
CREATE TRIGGER `tr_ParentRoles_BINS` BEFORE INSERT ON `ParentRoles` FOR EACH ROW
-- Emulates the CHECK (RoleId <> BaseRoleId) constraint
BEGIN
    IF (NEW.`RoleId` = NEW.`BaseRoleId`) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'CHECK constraint on ParentRoles failed', CONSTRAINT_NAME = 'CHECK';
    END IF;
END$$

USE `OptiGrade`$$
CREATE TRIGGER `tr_ParentRoles_BUPD` BEFORE UPDATE ON `ParentRoles` FOR EACH ROW
-- Emulates the CHECK (RoleId <> BaseRoleId) constraint
BEGIN
    IF (NEW.`RoleId` = NEW.`BaseRoleId`) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'CHECK constraint on ParentRoles failed';
    END IF;
END$$


DELIMITER ;
